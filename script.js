// Loading Screen
document.addEventListener('DOMContentLoaded', function() {
    const loadingScreen = document.getElementById('loading-screen');

    setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
        }, 500);
    }, 3000);
});

// Mobile Navigation
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');

hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

document.querySelectorAll('.nav-link').forEach(n => n.addEventListener('click', () => {
    hamburger.classList.remove('active');
    navMenu.classList.remove('active');
}));

// Smooth Scrolling
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Category Tabs
document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const category = this.getAttribute('data-category');

        // Remove active class from all tabs and categories
        document.querySelectorAll('.tab-btn').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.service-category').forEach(cat => cat.classList.remove('active'));

        // Add active class to clicked tab and corresponding category
        this.classList.add('active');
        document.getElementById(category).classList.add('active');
    });
});

// Service Modal
const modal = document.getElementById('service-modal');
const modalContent = document.getElementById('modal-content');
const closeBtn = document.querySelector('.close');

// Relaxe Tab
const relaxeTab = document.getElementById('relaxe-tab');
const relaxeBtn = document.getElementById('relaxe-btn');
const minimizeRelaxeBtn = document.getElementById('minimize-relaxe');
const closeRelaxeTabBtn = document.getElementById('close-relaxe-tab');

// Service details
const serviceDetails = {
    'bot-basico': {
        title: 'Bot B√°sico',
        description: 'Um bot Discord completo com funcionalidades essenciais para modera√ß√£o e gerenciamento do seu servidor.',
        options: [
            {
                type: 'COMPLETO',
                price: 'R$ 80,00',
                features: [
                    'Arquivo completo do bot',
                    'Permite alterar nome, estilo e forma de uso',
                    'Comandos de modera√ß√£o (kick, ban, mute, warn)',
                    'Sistema de logs detalhado',
                    'Prote√ß√£o contra spam e raids',
                    'Comandos de utilidade (ping, info, avatar)',
                    'Sistema de n√≠veis e experi√™ncia',
                    'Configura√ß√£o personalizada',
                    'Suporte vital√≠cio'
                ],
                delivery: 'Entrega no mesmo dia'
            },
            {
                type: 'URL',
                price: 'R$ 20,00',
                features: [
                    'Link do bot para adicionar ao servidor',
                    'N√£o permite altera√ß√µes no nome ou estilo',
                    'Configura√ß√£o manual dentro do servidor',
                    'Comandos de modera√ß√£o b√°sicos',
                    'Sistema de logs',
                    'Suporte por 30 dias',
                    'Ap√≥s 30 dias, s√≥ receber√° atualiza√ß√µes'
                ],
                delivery: 'Entrega no mesmo dia'
            }
        ],
        image: 'ü§ñ'
    },
    'bot-musica': {
        title: 'Bot de M√∫sica',
        description: 'Bot especializado em reprodu√ß√£o de m√∫sica com integra√ß√£o completa ao Spotify e YouTube.',
        options: [
            {
                type: 'COMPLETO',
                price: 'R$ 100,00',
                features: [
                    'Arquivo completo do bot',
                    'Permite alterar nome, estilo e forma de uso',
                    'Player de m√∫sica avan√ßado',
                    'Integra√ß√£o com Spotify e YouTube',
                    'Sistema de playlists personalizadas',
                    'Controles de volume e equaliza√ß√£o',
                    'Fila de m√∫sicas com controles',
                    'Comandos de busca e reprodu√ß√£o',
                    'Suporte vital√≠cio'
                ],
                delivery: 'Entrega no mesmo dia'
            },
            {
                type: 'URL',
                price: 'R$ 35,00',
                features: [
                    'Link do bot para adicionar ao servidor',
                    'N√£o permite altera√ß√µes no nome ou estilo',
                    'Configura√ß√£o manual dentro do servidor',
                    'Player de m√∫sica b√°sico',
                    'Integra√ß√£o Spotify/YouTube',
                    'Suporte por 30 dias',
                    'Atualiza√ß√µes inclusas'
                ],
                delivery: 'Entrega no mesmo dia'
            }
        ],
        image: 'üéµ'
    },
    'bot-ia': {
        title: 'Bot IA',
        description: 'Bot inteligente com capacidades de IA para chat, gera√ß√£o de imagens e modera√ß√£o autom√°tica.',
        options: [
            {
                type: 'COMPLETO',
                price: 'R$ 90,00',
                features: [
                    'Arquivo completo do bot',
                    'Permite alterar nome, estilo e forma de uso',
                    'Chat inteligente com IA integrada',
                    'Gera√ß√£o de imagens por IA',
                    'Modera√ß√£o autom√°tica inteligente',
                    'An√°lise de sentimento de mensagens',
                    'Comandos de entretenimento',
                    'Sistema de aprendizado cont√≠nuo',
                    'Suporte vital√≠cio'
                ],
                delivery: 'Entrega no mesmo dia'
            },
            {
                type: 'URL',
                price: 'R$ 50,00',
                features: [
                    'Link do bot para adicionar ao servidor',
                    'N√£o permite altera√ß√µes no nome ou estilo',
                    'Configura√ß√£o manual dentro do servidor',
                    'Chat com IA b√°sico',
                    'Gera√ß√£o de imagens simples',
                    'Suporte por 30 dias',
                    'Atualiza√ß√µes inclusas'
                ],
                delivery: 'Entrega no mesmo dia'
            }
        ],
        image: 'üß†'
    },
    'bot-agenda': {
        title: 'Bot de Agenda',
        description: 'Sistema completo de agendamento com lembretes e integra√ß√£o ao Google Calendar.',
        options: [
            {
                type: 'COMPLETO',
                price: 'R$ 90,00',
                features: [
                    'Arquivo completo do bot',
                    'Permite alterar nome, estilo e forma de uso',
                    'Sistema de agendamento completo',
                    'Lembretes autom√°ticos',
                    'Integra√ß√£o com Google Calendar',
                    'Notifica√ß√µes personalizadas',
                    'Gerenciamento de eventos',
                    'Sincroniza√ß√£o multi-dispositivo',
                    'Suporte vital√≠cio'
                ],
                delivery: 'Entrega no mesmo dia'
            },
            {
                type: 'URL',
                price: 'R$ 27,00',
                features: [
                    'Link do bot para adicionar ao servidor',
                    'N√£o permite altera√ß√µes no nome ou estilo',
                    'Configura√ß√£o manual dentro do servidor',
                    'Sistema de agendamento b√°sico',
                    'Lembretes simples',
                    'Suporte por 30 dias',
                    'Atualiza√ß√µes inclusas'
                ],
                delivery: 'Entrega no mesmo dia'
            }
        ],
        image: 'üìÖ'
    },
    'bot-customizavel': {
        title: 'Bot Customiz√°vel',
        description: 'Personaliza√ß√£o total e possibilidade de adicionar v√°rios bots em um s√≥.',
        options: [
            {
                type: 'CUSTOMIZADO',
                price: 'R$ 20-180',
                features: [
                    'Personaliza√ß√£o total conforme pedido',
                    'Possibilidade de adicionar v√°rios bots em um s√≥',
                    'Funcionalidades exclusivas',
                    'Design personalizado',
                    'Integra√ß√µes especiais',
                    'Suporte personalizado',
                    'Prazo de entrega: 4 a 10 dias',
                    'Op√ß√£o de urg√™ncia (+R$ 50)'
                ],
                delivery: '4 a 10 dias (urg√™ncia +R$ 50)',
                note: 'Pre√ßo varia conforme customiza√ß√£o solicitada'
            }
        ],
        image: '‚öôÔ∏è'
    },
    'bot-premium': {
        title: 'Bot Premium',
        description: 'Inclui todos os bots de Discord criados pela Saimon Dev Store.',
        options: [
            {
                type: 'PREMIUM',
                price: 'R$ 500,00',
                features: [
                    'Todos os bots da loja inclu√≠dos',
                    'Recebe 2 arquivos: vers√£o URL e vers√£o COMPLETA',
                    'Acesso total a todos os bots',
                    'Suporte vital√≠cio',
                    'Atualiza√ß√µes tamb√©m para a vers√£o URL',
                    'Recomendada a vers√£o COMPLETA para desenvolvedores',
                    'Configura√ß√£o completa de todos os bots',
                    'Documenta√ß√£o detalhada'
                ],
                delivery: 'Entrega no mesmo dia',
                note: 'Servi√ßo premium com destaque especial'
            }
        ],
        image: 'üëë'
    },
    'portfolio-basico': {
        title: 'Portf√≥lio B√°sico',
        description: 'Site profissional responsivo para mostrar seus projetos e habilidades.',
        options: [
            {
                type: 'B√ÅSICO',
                price: 'R$ 30,00',
                features: [
                    'Design responsivo moderno',
                    'Formul√°rio de contato funcional',
                    'Anima√ß√µes CSS personalizadas',
                    'SEO otimizado',
                    'Integra√ß√£o com redes sociais',
                    'Galeria de projetos',
                    'Suporte por 30 dias'
                ],
                delivery: '7 a 10 dias'
            }
        ],
        image: 'üíº'
    },
    'portfolio-premium': {
        title: 'Portf√≥lio Premium',
        description: 'Site completo com painel administrativo e funcionalidades avan√ßadas.',
        options: [
            {
                type: 'PREMIUM',
                price: 'R$ 200,00',
                features: [
                    'Painel administrativo completo',
                    'Blog integrado com CMS',
                    'Analytics avan√ßado',
                    'Sistema de coment√°rios',
                    'Integra√ß√£o com APIs',
                    'Backup autom√°tico',
                    'Suporte por 90 dias para atualiza√ß√µes'
                ],
                delivery: '10 a 15 dias'
            }
        ],
        image: 'üëë'
    },
    'portfolio-customizavel': {
        title: 'Portf√≥lio Customiz√°vel',
        description: 'Totalmente customizado conforme o cliente desejar.',
        options: [
            {
                type: 'CUSTOMIZADO',
                price: 'R$ 20-300',
                features: [
                    'Design totalmente personalizado',
                    'Funcionalidades exclusivas',
                    'Integra√ß√µes especiais',
                    'Suporte personalizado',
                    'Prazo de entrega: 7 a 10 dias',
                    'Op√ß√£o de entrega urgente (+R$ 50)'
                ],
                delivery: '7 a 10 dias (urg√™ncia +R$ 50)',
                note: 'Pre√ßo varia conforme conte√∫do e pedido'
            }
        ],
        image: 'üé®'
    },
    'minecraft-basico': {
        title: 'Script B√°sico',
        description: 'Modera√ß√£o para servidor com suporte de 30 dias e atualiza√ß√µes eternas.',
        options: [
            {
                type: 'B√ÅSICO',
                price: 'R$ 30,00',
                features: [
                    'Sistema de modera√ß√£o para servidor',
                    'Comandos b√°sicos de administra√ß√£o',
                    'Prote√ß√£o contra griefing',
                    'Sistema de logs',
                    'Suporte por 30 dias',
                    'Atualiza√ß√µes eternas'
                ],
                delivery: 'Entrega no mesmo dia'
            }
        ],
        image: '‚ö°'
    },
    'minecraft-personalizado': {
        title: 'Script Personalizado',
        description: 'Funcionalidades espec√≠ficas conforme sua solicita√ß√£o.',
        options: [
            {
                type: 'PERSONALIZADO',
                price: 'R$ 20-180',
                features: [
                    'Funcionalidades espec√≠ficas conforme pedido',
                    'Sistema de economia personalizado',
                    'Mini-games customizados',
                    'Sistema de ranks e permiss√µes',
                    'Plugins de prote√ß√£o avan√ßados',
                    'Suporte por 90 dias',
                    'Atualiza√ß√µes eternas',
                    'Prazo de entrega: 1 a 10 dias'
                ],
                delivery: '1 a 10 dias',
                note: 'Pre√ßo varia conforme funcionalidades solicitadas'
            }
        ],
        image: 'üîß'
    },
    'servidor-basico': {
        title: 'Servidor B√°sico',
        description: 'At√© 5 bots b√°sicos configurados com suporte de 30 dias.',
        options: [
            {
                type: 'B√ÅSICO',
                price: 'R$ 80,00',
                features: [
                    'At√© 5 bots b√°sicos j√° criados',
                    'Todos configurados e prontos para uso',
                    'Bots j√° criados e configurados por mim',
                    'Configura√ß√£o completa do servidor',
                    'Canais organizados',
                    'Suporte por 30 dias'
                ],
                delivery: '1 a 3 dias'
            }
        ],
        image: 'üéÆ'
    },
    'servidor-premium': {
        title: 'Servidor Premium',
        description: 'Todos os bots da loja configurados e personalizados.',
        options: [
            {
                type: 'PREMIUM',
                price: 'R$ 110,00',
                features: [
                    'Todos os bots da loja configurados',
                    'Personaliza√ß√£o completa conforme desejo',
                    'Design personalizado do servidor',
                    'Canais organizados e tem√°ticos',
                    'Sistema de cargos e permiss√µes',
                    'Suporte completo por 2 anos',
                    'Atualiza√ß√µes e manuten√ß√£o inclusas'
                ],
                delivery: '1 a 3 dias'
            }
        ],
        image: '‚≠ê'
    },
    'servidor-premium-plus': {
        title: 'Servidor Premium++',
        description: 'Suporte vital√≠cio e totalmente customiz√°vel para lojas e servidores de games.',
        options: [
            {
                type: 'PREMIUM++',
                price: 'R$ 320,00',
                features: [
                    'Tudo que os outros servidores t√™m',
                    'Suporte vital√≠cio',
                    'Totalmente customiz√°vel',
                    'Ideal para loja ou servidor de games',
                    'Conta com mais de 5000 pessoas reais j√° configuradas',
                    'Design exclusivo e profissional',
                    'Integra√ß√µes avan√ßadas',
                    'Op√ß√£o de entrega urgente (+R$ 80)'
                ],
                delivery: '8 a 10 dias (urg√™ncia +R$ 80)',
                note: 'Servi√ßo premium com destaque especial'
            }
        ],
        image: 'üíé'
    }
};

// Open modal
document.querySelectorAll('.service-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const serviceCard = this.closest('.service-card');
        const serviceType = serviceCard.getAttribute('data-service');
        const service = serviceDetails[serviceType];

        if (service) {
            let optionsHtml = '';

            service.options.forEach((option, index) => {
                const isFirst = index === 0;
                optionsHtml += `
                    <div class="service-option ${isFirst ? 'active' : ''}" data-option="${index}">
                        <div class="option-header">
                            <h4 class="option-type">${option.type}</h4>
                            <div class="option-price">${option.price}</div>
                        </div>
                        <div class="option-features">
                            <ul>
                                ${option.features.map(feature => `<li><i class="fas fa-check"></i> ${feature}</li>`).join('')}
                            </ul>
                        </div>
                        <div class="option-delivery">
                            <strong>Prazo de Entrega:</strong> ${option.delivery}
                        </div>
                        ${option.note ? `<div class="option-note">${option.note}</div>` : ''}
                        <button class="btn btn-primary buy-option-btn" onclick="buyService('${serviceType}', ${index})">
                            COMPRAR ${option.type}
                        </button>
                    </div>
                `;
            });

            modalContent.innerHTML = `
                <div class="service-modal-content">
                    <div class="service-modal-header">
                        <span class="service-emoji">${service.image}</span>
                        <h2>${service.title}</h2>
                    </div>
                    <div class="service-modal-body">
                        <p class="service-description">${service.description}</p>

                        ${service.options.length > 1 ? `
                            <div class="options-tabs">
                                ${service.options.map((option, index) => `
                                    <button class="option-tab ${index === 0 ? 'active' : ''}" data-option="${index}">
                                        ${option.type}
                                    </button>
                                `).join('')}
                            </div>
                        ` : ''}

                        <div class="service-options">
                            ${optionsHtml}
                        </div>

                        <div class="service-actions">
                            <button class="btn btn-secondary" onclick="closeModal()">
                                Fechar
                            </button>
                        </div>
                    </div>
                </div>
            `;

            // Add event listeners for option tabs
            if (service.options.length > 1) {
                document.querySelectorAll('.option-tab').forEach(tab => {
                    tab.addEventListener('click', function() {
                        const optionIndex = this.getAttribute('data-option');

                        // Update tab states
                        document.querySelectorAll('.option-tab').forEach(t => t.classList.remove('active'));
                        document.querySelectorAll('.service-option').forEach(o => o.classList.remove('active'));

                        this.classList.add('active');
                        document.querySelector(`.service-option[data-option="${optionIndex}"]`).classList.add('active');
                    });
                });
            }

            modal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }
    });
});

// Close modal
closeBtn.addEventListener('click', closeModal);
window.addEventListener('click', function(event) {
    if (event.target === modal) {
        closeModal();
    }
});

function closeModal() {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
}

// Bot√£o RELAXE
relaxeBtn.addEventListener('click', function() {
    relaxeTab.classList.add('active');
    relaxeBtn.style.display = 'none';

    // Feedback visual
    this.style.transform = 'scale(1.1)';
    setTimeout(() => {
        this.style.transform = 'scale(1)';
    }, 200);
});

// Minimizar aba RELAXE
minimizeRelaxeBtn.addEventListener('click', function() {
    relaxeTab.classList.toggle('minimized');

    if (relaxeTab.classList.contains('minimized')) {
        this.innerHTML = '<i class="fas fa-expand"></i>';
    } else {
        this.innerHTML = '<i class="fas fa-minus"></i>';
    }
});

// Fechar aba RELAXE
closeRelaxeTabBtn.addEventListener('click', function() {
    relaxeTab.classList.remove('active');
    relaxeTab.classList.remove('minimized');
    relaxeBtn.style.display = 'flex';
    minimizeRelaxeBtn.innerHTML = '<i class="fas fa-minus"></i>';

    // Pausar o v√≠deo quando fechar
    const iframe = document.getElementById('lofi-iframe');
    if (iframe) {
        const currentSrc = iframe.src;
        iframe.src = currentSrc;
    }
});

// Drag and drop para a aba RELAXE
let isDragging = false;
let currentX;
let currentY;
let initialX;
let initialY;
let xOffset = 0;
let yOffset = 0;

const relaxeTabHeader = document.querySelector('.relaxe-tab-header');

relaxeTabHeader.addEventListener('mousedown', dragStart);
document.addEventListener('mousemove', drag);
document.addEventListener('mouseup', dragEnd);

function dragStart(e) {
    initialX = e.clientX - xOffset;
    initialY = e.clientY - yOffset;

    if (e.target === relaxeTabHeader) {
        isDragging = true;
    }
}

function drag(e) {
    if (isDragging) {
        e.preventDefault();

        currentX = e.clientX - initialX;
        currentY = e.clientY - initialY;

        xOffset = currentX;
        yOffset = currentY;

        setTranslate(currentX, currentY, relaxeTab);
    }
}

function setTranslate(xPos, yPos, el) {
    el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;
}

function dragEnd(e) {
    initialX = currentX;
    initialY = currentY;
    isDragging = false;
}

function buyService(serviceType, optionIndex) {
    closeModal();
    const service = serviceDetails[serviceType];
    const option = service.options[optionIndex];
    const message = `Ol√°! Gostaria de comprar o servi√ßo: ${service.title} (${option.type}) por ${option.price}.`;
    const discordUrl = `https://discord.gg/QtDWnzg7n2`;

    // Abrir Discord em nova aba
    window.open(discordUrl, '_blank');

    // Mostrar mensagem informativa
    alert(`üéØ Redirecionando para o Discord!\n\n${message}\n\nEntre no servidor e abra um ticket para finalizar sua compra.`);
}

// Snake Game
class SnakeGame {
    constructor() {
        this.canvas = document.getElementById('game-canvas');
        this.ctx = this.canvas.getContext('2d');
        this.gridSize = 20;
        this.snake = [{ x: 10, y: 10 }];
        this.food = this.generateFood();
        this.direction = 'right';
        this.score = 0;
        this.gameRunning = false;
        this.gameSpeed = 150;

        this.bindEvents();
        this.draw();
    }

    bindEvents() {
        document.addEventListener('keydown', (e) => {
            if (!this.gameRunning) return;

            switch (e.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    if (this.direction !== 'down') this.direction = 'up';
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    if (this.direction !== 'up') this.direction = 'down';
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    if (this.direction !== 'right') this.direction = 'left';
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    if (this.direction !== 'left') this.direction = 'right';
                    break;
            }
        });

        document.getElementById('start-game').addEventListener('click', () => {
            this.startGame();
        });

        document.getElementById('pause-game').addEventListener('click', () => {
            this.togglePause();
        });
    }

    generateFood() {
        const x = Math.floor(Math.random() * (this.canvas.width / this.gridSize));
        const y = Math.floor(Math.random() * (this.canvas.height / this.gridSize));
        return { x, y };
    }

    startGame() {
        this.snake = [{ x: 10, y: 10 }];
        this.direction = 'right';
        this.score = 0;
        this.food = this.generateFood();
        this.gameRunning = true;
        this.updateScore();
        this.gameLoop();
    }

    togglePause() {
        this.gameRunning = !this.gameRunning;
        if (this.gameRunning) {
            this.gameLoop();
        }
    }

    gameLoop() {
        if (!this.gameRunning) return;

        this.update();
        this.draw();

        setTimeout(() => {
            this.gameLoop();
        }, this.gameSpeed);
    }

    update() {
        const head = { ...this.snake[0] };

        switch (this.direction) {
            case 'up': head.y--; break;
            case 'down': head.y++; break;
            case 'left': head.x--; break;
            case 'right': head.x++; break;
        }

        // Check collision with walls
        if (head.x < 0 || head.x >= this.canvas.width / this.gridSize ||
            head.y < 0 || head.y >= this.canvas.height / this.gridSize) {
            this.gameOver();
            return;
        }

        // Check collision with self
        if (this.snake.some(segment => segment.x === head.x && segment.y === head.y)) {
            this.gameOver();
            return;
        }

        this.snake.unshift(head);

        // Check if food is eaten
        if (head.x === this.food.x && head.y === this.food.y) {
            this.score += 10;
            this.updateScore();
            this.food = this.generateFood();
            // Increase speed
            this.gameSpeed = Math.max(50, this.gameSpeed - 5);
        } else {
            this.snake.pop();
        }
    }

    draw() {
        // Clear canvas
        this.ctx.fillStyle = '#0F0F0F';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw snake
        this.ctx.fillStyle = '#8B5CF6';
        this.snake.forEach((segment, index) => {
            if (index === 0) {
                // Head
                this.ctx.fillStyle = '#EF4444';
            } else {
                // Body
                this.ctx.fillStyle = '#8B5CF6';
            }
            this.ctx.fillRect(
                segment.x * this.gridSize,
                segment.y * this.gridSize,
                this.gridSize - 2,
                this.gridSize - 2
            );
        });

        // Draw food
        this.ctx.fillStyle = '#EF4444';
        this.ctx.fillRect(
            this.food.x * this.gridSize,
            this.food.y * this.gridSize,
            this.gridSize - 2,
            this.gridSize - 2
        );
    }

    updateScore() {
        document.getElementById('score').textContent = this.score;
    }

    gameOver() {
        this.gameRunning = false;
        alert(`Game Over! Pontua√ß√£o: ${this.score}`);
    }
}

// Initialize Snake Game
const snakeGame = new SnakeGame();

// Contact Form with Discord Webhook
const contactForm = document.getElementById('contact-form');
const webhookUrl = 'https://discord.com/api/webhooks/1403607159400300596/IFzCmhK0QoWg_Ndcn18HTL-ofwFjZo3eVgumBiriPGcVGzo5wco0Ng-zjNJ3nNlGMkgU';

contactForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    const formData = new FormData(this);
    const name = formData.get('name');
    const email = formData.get('email');
    const service = formData.get('service');
    const message = formData.get('message');

    // Create Discord embed
    const embed = {
        title: 'üéØ Nova Mensagem da SAIMON DEV STORE',
        color: 0x8B5CF6,
        fields: [
            {
                name: 'üë§ Nome',
                value: name,
                inline: true
            },
            {
                name: 'üìß Email',
                value: email,
                inline: true
            },
            {
                name: 'üõ†Ô∏è Servi√ßo de Interesse',
                value: service || 'N√£o especificado',
                inline: false
            },
            {
                name: 'üí¨ Mensagem',
                value: message,
                inline: false
            }
        ],
        timestamp: new Date().toISOString(),
        footer: {
            text: 'SAIMON DEV STORE - Formul√°rio de Contato'
        }
    };

    const webhookData = {
        embeds: [embed]
    };

    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(webhookData)
        });

        if (response.ok) {
            alert('‚úÖ Mensagem enviada com sucesso! Entraremos em contato em breve.');
            contactForm.reset();
        } else {
            throw new Error('Erro ao enviar mensagem');
        }
    } catch (error) {
        console.error('Erro:', error);
        alert('‚ùå Erro ao enviar mensagem. Tente novamente ou entre em contato pelo Discord.');
    }
});

// Scroll animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
        }
    });
}, observerOptions);

// Observe elements for animation
document.querySelectorAll('.service-card, .quality-card, .stat').forEach(el => {
    el.classList.add('fade-in');
    observer.observe(el);
});

// Navbar scroll effect
window.addEventListener('scroll', () => {
    const navbar = document.querySelector('.navbar');
    if (window.scrollY > 100) {
        navbar.style.background = 'rgba(15, 15, 15, 0.98)';
    } else {
        navbar.style.background = 'rgba(15, 15, 15, 0.95)';
    }
});

// Add CSS for modal content
const style = document.createElement('style');
style.textContent = `
    .service-modal-content {
        color: var(--light-color);
    }

    .service-modal-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(139, 92, 246, 0.3);
    }

    .service-emoji {
        font-size: 3rem;
    }

    .service-modal-header h2 {
        color: var(--primary-color);
        font-size: 2rem;
    }

    .service-description {
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 2rem;
        color: #CCCCCC;
    }

    .options-tabs {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 2rem;
        justify-content: center;
    }

    .option-tab {
        padding: 0.8rem 1.5rem;
        background: var(--glass-bg);
        border: 2px solid var(--glass-border);
        border-radius: 25px;
        color: var(--light-color);
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Rajdhani', sans-serif;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .option-tab:hover {
        border-color: var(--primary-color);
        transform: translateY(-2px);
    }

    .option-tab.active {
        background: var(--purple-gradient);
        border-color: var(--primary-color);
        box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
    }

    .service-options {
        margin-bottom: 2rem;
    }

    .service-option {
        display: none;
        animation: fadeIn 0.5s ease;
    }

    .service-option.active {
        display: block;
    }

    .option-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding: 1rem;
        background: rgba(139, 92, 246, 0.1);
        border-radius: 10px;
        border: 1px solid rgba(139, 92, 246, 0.2);
    }

    .option-type {
        color: var(--primary-color);
        font-size: 1.3rem;
        margin: 0;
    }

    .option-price {
        color: var(--accent-color);
        font-weight: 700;
        font-size: 1.5rem;
    }

    .option-features {
        margin-bottom: 1.5rem;
    }

    .option-features h3 {
        color: var(--primary-color);
        margin-bottom: 1rem;
    }

    .option-features ul {
        list-style: none;
        margin-bottom: 1rem;
    }

    .option-features li {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        color: #CCCCCC;
    }

    .option-features i {
        color: var(--accent-color);
    }

    .option-delivery {
        margin-bottom: 1rem;
        padding: 0.8rem;
        background: rgba(239, 68, 68, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(239, 68, 68, 0.2);
        color: #CCCCCC;
    }

    .option-note {
        margin-bottom: 1.5rem;
        padding: 0.8rem;
        background: rgba(255, 215, 0, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(255, 215, 0, 0.2);
        color: #FFD700;
        font-style: italic;
    }

    .buy-option-btn {
        width: 100%;
        margin-bottom: 1rem;
    }

    .service-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    @media (max-width: 768px) {
        .options-tabs {
            flex-direction: column;
            align-items: center;
        }

        .option-tab {
            width: 100%;
            max-width: 200px;
        }

        .option-header {
            flex-direction: column;
            gap: 0.5rem;
            text-align: center;
        }

        .service-actions {
            flex-direction: column;
        }
    }
`;
document.head.appendChild(style);
